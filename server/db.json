{
  "blogs": [
    {
      "title": "10 things you didn‚Äôt know you could do with GitHub Projects",
      "author": "Kedasha Kerr",
      "content": "GitHub Projects has been adopted by program managers, OSS maintainers, enterprises, and individual developers alike for its user-friendly design and efficiency. We all know that managing issues and pull requests in our repositories can be challenging.\n\nTo help you optimize your usage of GitHub Projects to plan and track your work from start to finish, I‚Äôll be sharing 10 things you can do with GitHub Projects to make it easier to keep track of your issues and pull requests.\n\n1. Manage your projects with the CLI\nIf you prefer to work from your terminals, we‚Äôve made it more convenient for you to manage and automate your project workflows with the GitHub CLI project command. This essentially allows you to work more collaboratively with your team to keep your projects updated with your existing toolkit.\n\nFor example, if I wanted to add a draft issue to my project ‚ÄúLearning Ruby,‚Äù I would do this by first ensuring that I have the CLI installed and I‚Äôm authenticated. Once authenticated, I need to find the node id of the project I want to manage with the CLI and the API‚Äîyou must know the node ID of the project you want to interact with. To find the node ID of the project, I can run the following query:",
      "id": 1
    },
    {
      "title": "Quarkus 3.3.1 released - Maintenance release",
      "author": "By Guillaume Smet",
      "content": "We released Quarkus 3.3.1, our first maintenance release for our 3.3 release train.\n\nIt includes a bunch of bugfixes, together with documentation improvements.\n\nWe are aware of a startup performance/memory regression introduced in 3.3 and are working hard on fixing it. This issue is not solved in 3.3.1 but should be solved in the upcoming 3.3.2 that will be released next week.\n\nUpdate\nTo update to Quarkus 3.3.1, we recommend updating to the latest version of the Quarkus CLI and run:\n\n\nquarkus update\nTo migrate from 3.2, please refer to our migration guide.\n\nIf you are not already using 3.x, please refer to the 3.0 announcement for all the details. You can also refer to this blog post for additional details. Once you upgraded to 3.0, also have a look at the 3.1 and 3.2 migration guides.\n\nFull changelog\nYou can get the full changelog of 3.3.1 on GitHub.\n\nCome Join Us\nWe value your feedback a lot so please report bugs, ask for improvements‚Ä¶‚Äã Let‚Äôs build something great together!\n\nIf you are a Quarkus user or just curious, don‚Äôt be shy and join our welcoming community:\n\nprovide feedback on GitHub;\n\ncraft some code and push a PR;\n\ndiscuss with us on Zulip and on the mailing list;\n\nask your questions on Stack Overflow.",
      "id": 2
    },
    {
      "title": "Exploring the Trending Web Designs of 2023",
      "author": "codetheorem",
      "content": "Having a website and having a good website design are two ends of the same thread. How do you ensure a good website design when there are many web design trends around? We‚Äôve got you.\n\n\nLast year, web designs trends 2022 was dedicated to creating some of the most engaging web designs. However, the web design trends of 2023 are all about exploring and experimenting.\n\nWe have curated the ultimate list of the top 10 web design trends 2023 Edition right below.\n\nTop 10 Web Design Trends 2023 edition\nTypography\n\n\nimage\n\nWith the rising need for content-rich websites, the not-so-new trend of web design trends 2023- Typography is all about how designers have found their way around content, a lot of content, and some cool ways to present it. This is one of the web design trends that has been around for years, but it has elevated to another level with a whole lot of originality. The freedom to customize and experiments with fonts has allowed designers to create distinct website design.\n\n\n‚ÄúWhat you write is impactful, but how you present is a game-changer.‚Äù\n\n\nSimultaneously, custom fonts and hand-created lettering are getting so popular you can‚Äôt resist trying them for your website. Fonts styles, size, and placement can change how your website looks. It is important to ensure your website fonts complement your brand values. Importantly, if you are an e-commerce website, choosing the right fonts for your business is crucial.\n\n",
      "id": 3
    },
    {
      "title": "Create A CI/CD Pipeline For Front End Projects",
      "author": "Golden Masathy",
      "content": "Hey there, fellow developers! Today, we‚Äôre diving into the exciting world of ‚ÄúCreating a CI/CD Pipeline for Front-end Projects.‚Äù üöÄ Before you think, ‚ÄúWait, what‚Äôs CI/CD again?‚Äù‚Äîdon‚Äôt worry; I got you covered!\n\nContinuous Integration and Continuous Delivery (or Continuous Deployment, depending on your preferences) are referred to as CI/CD. It‚Äôs a way to automate the development, testing, and deployment of your front-end applications, to put it simply. Imagine it as a robot companion that takes care of all the monotonous tasks, allowing you more time to focus on developing fantastic features and repairing bugs.\n\nYou might be wondering why all this automation stuff is necessary now. Let me just say that it‚Äôs a game-changer! CI/CD is like having a magic wand that increases productivity, collaboration, and code quality in today‚Äôs fast-paced world of software development.\n\nUsing continuous integration (CI), you and your team can automatically merge code changes frequently, find problems early, and prevent unpleasant integration surprises. A smooth and reliable delivery of your app to users is ensured by CD, which lets you easily push those changes to various environments.",
      "id": 4
    },
    {
      "title": "EP71: CI/CD Pipeline Explained in Simple Terms",
      "author": "BYTEBYTEGO",
      "content": "QA Wolf gets you to 80% automated test coverage in 4 months (Sponsored)\n\nManually end-to-end testing? Here's why you should switch to automation:\n\nTest all your user flows in 3 minutes\n\nFreedom to run your test suite whenever you want\n\nIncreased confidence in releases\n\nTime to focus on other priorities\n\nThe list goes on...\n\nSo why wouldn't you? Time and resources. In-house teams typically take 2 years to reach high coverage. And you need at least a few automation engineers to build, run, and maintain a test suite.\n\nNot anymore.\n\nQA Wolf offers a cost-effective approach to getting 80% test coverage in just 4 months ‚Äî even for the most complex web apps.\n\nAnd, they include unlimited parallel runs on their testing infrastructure + 24-hour maintenance and triage. Schedule a demo to learn more.\n\nPS: QA Wolf has a 4.8/5 ‚≠êÔ∏è rating on G2 - reviewed by companies with 51-1000+ employees.",
      "id": 5
    },
    {
      "title": "Good-Bye Kris N√≥va",
      "author": "The New Stack",
      "content": "When anyone middle-aged or younger dies, It‚Äôs a cliche that they died much too young. Sometimes, it‚Äôs really true, though. Someone dies who‚Äôs a true, innovative leader who was changing the world for the better. Such a person was Kris N√≥va.\n\nI can‚Äôt claim to have known N√≥va well, but she impressed me. Most people who‚Äôd met her would agree. Her job title when she died from a climbing accident was GitHub Principal Engineer. But, she was far more than that.\n\nNot even 40, N√≥va had co-founded The Nivenly Foundation. This organization is a member-controlled and democratically-governed open source foundation. Its goal is sought to bring sustainability, autonomy, and control to open source projects and communities. Specifically, it governs the popular tech Mastodon site, Hachyderm Decentralized Social Media, and the Aurae Runtime Project. The latter is a Kubernetes node workload management program.",
      "id": 6
    },
    {
      "title": "Lazy Loading In JavaScript",
      "author": "Chisom Kanu",
      "content": "Introduction\nWeb users have high expectations regarding website loading times and performance. Websites that are slow to load can increase bounce rates and dissatisfied users. To address this challenge, developers are constantly seeking different techniques to improve the speed and overall user experience, and one such approach is ‚ÄùLazy Loading.‚Äù To achieve lazy loading, developers use JavaScript. Using JavaScript, web developers can control when and how specific elements are fetched from the server and rendered on the user‚Äôs screen. This article will look into the benefits of lazy loading, ways to implement it, its impacts on web performance, challenges, and best practices.\n\nBenefits of Lazy Loading\nLet‚Äôs look at some benefits of using lazy loading. They include:\n\nReduced Bandwith Usage: Loading unnecessary resources can consume substantial bandwidth, affecting users and website owners. Lazy loading can help conserve bandwidth by only loading the needed resources. It becomes beneficial for visitors who may not scroll down to view the entire page, as it can help to prevent them from exceeding their monthly limits.\nIncreased Page Speed Scores and Enhanced SEO Performance: Search engines consider the speed of a page as one of the ranking factors. By improving loading time, lazy loading positively influences page speed scores measured by various tools like Google‚Äôs PageSpeed. Higher page speed scores improve SEO and contribute to better retention and conversion rates.\nReduced Server Load: It helps distribute the server load more efficiently by fetching resources on demand. It reduces server stress, allowing it to handle a higher number of user requests.\nImproved Time to Interactivity(TTI): Time to interactivity measures the time it takes for a webpage to become fully interactive, allowing users to interact with buttons, links, and other elements. By prioritizing the loading of important content, lazy loading helps reduce the TTI, providing users with a more enjoyable browsing experience.\nOptimized Mobile Browsing and Improved User Experience: Mobile devices usually have limited processing power and network capabilities. By employing lazy loading, websites adapt to these constraints, delivering a smoother experience and reducing data consumption, making them more mobile-friendly. Users can quickly interact with the visible content without waiting for off-screen resources to load.",
      "id": 7
    },
    {
      "title": "Who Is Behind PHP",
      "author": " Huei-Hsin Wang",
      "content": "History Lesson\nBefore discussing the current state, we must consider where PHP comes from. It was created by Rasmus Lerdorf in 1994. He created PHP to be able to track visitors to his online resume. He called it Personal Home Page Tools. In 1995, he announced the source code of PHP. Since then, it has been rewritten a few times and got a lot of new features. We can say that PHP has completely changed from what Rasmus built for his needs. Keep this in mind for later in this article.\n\nUsed Terms\nBefore we continue, I‚Äôd like to clarify some terms used in this article. There are no ‚Äúofficial‚Äù terms, so these are the ones that I use:\n\nRFC - Request for Comments. This is a document that describes a new feature for PHP\nPHP Core Maintainers - People who watch and triage the issue tracker and regularly fix issues\nPHP Core Contributors - People who occasionally contribute code and propose ideas to the lang or create RFCs\nPHP Core Voters - People who are allowed to vote on RFCs (includes people from the other two groups)\nPHP Contributors - People who generally contribute to PHP in one way or another. There is a large amount of those behind PHP. The main difference between them and the groups above is that the ones above require specific permissions.\nThe term internals is often wrongly used for the PHP Core Contributors. This is because there is an Internals mailing list, which despite public belief, is free for everyone to join.\n\nAlso, the term core team is not quite adequate because there is no team in the conventional sense behind everything. It‚Äôs a collective of supporters.",
      "id": 8
    },
    {
      "title": "Tailwind CSS Tips and Tricks Worth Knowing",
      "author": " WRITTEN BY YOAV GANBAR",
      "content": "In this blog post, I‚Äôm not going to say why you should use Tailwind. I‚Äôve covered the whole debate enough in a previous post.\n\nThis time I‚Äôll explore some Tailwind tips that can significantly enhance your web development experience. Whether you're a beginner or an advanced Tailwind user, I hope you find something useful.\n\nLet‚Äôs go!\n\nDynamic utility classes\nTailwind purges classes that are not being used. This is how it's able to have so many features and still keep our CSS bundle size small. So, if you want to use dynamic class names, you need to have all the class names you want written somewhere in your code. This is in order for Tailwind to be able to statically analyze your code.\n\nFor example something like this won‚Äôt work:\n\nconst DoesntWork = () => {\n  const colors = ['red', 'green', 'yellow'];\n  const [color, setColor] = React.useState(colors[0]);\n  const changeColor = () => {\n    setColor('green');\n  };\n  return (\n    <>\n      <div className={`w-40 h-40 border bg-${color}-500`}></div>\n      <select\n        value={color}\n        className={`bg-${color}-500`}\n        onChange={(e) => setColor(e.target.value)}\n      >\n        <option value=\"\">choose</option>\n        {colors.map((c) => (\n          <option key={c} value={c}>\n            {c}\n          </option>\n        ))}\n      </select>\n      <button onClick={changeColor}>Change color</button>\n    </>\n  );\n};\nThat is because there is no way for Tailwind to find it‚Äôs classes statically. Having bg-${color}-500 needs to be evaluated in runtime. However, if we do use the full class names, the Tailwind compiler can make it work:\n\nconst Works = () => {\n  const colors = ['bg-red-500', 'bg-green-500', 'bg-yellow-500'];\n  const [color, setColor] = React.useState(colors[0]);\n  const changeColor = () => {\n    setColor('bg-green-500');\n  };\n  return (\n    <>\n      <div className={`w-40 h-40 border ${color}`}></div>\n      <select\n        value={color}\n        className={`${color}`}\n        onChange={(e) => setColor(e.target.value)}\n      >\n        <option value=\"\">choose</option>\n        {colors.map((c) => (\n          <option key={c} value={c}>\n            {c}\n          </option>\n        ))}\n      </select>\n      <button onClick={changeColor}>Change color</button>\n    </>\n  );\n};\nUsing Tailwind inside CSS\nThere are some times where we are forced to use CSS for our styles; for example, when using a third-party library. We can stick with the Tailwind colors by using the @apply directive or the theme function. Let‚Äôs have a look at a code example:",
      "id": 9
    },
    {
      "title": "Patterns for Reactivity with Modern Vanilla JavaScript",
      "author": "Marc Grabanski",
      "content": "Reactivity Patterns are Core to Web Development\nWe handle a lot with JavaScript in websites and web apps since the browser is an entirely asynchronous environment. We must respond to user inputs, communicate with servers, log, perform, etc. All these tasks involve updates to the UI, Ajax requests, browser URLs, and navigation changes, making cascading data changes a core aspect of web development.\n\nAs an industry, we associate reactivity with frameworks, but you can learn a lot by implementing reactivity in pure JavaScript. We can mix and match these patterns to wire behavior to data changes.\n\nLearning core patterns with pure JavaScript will lead to less code and better performance in your web apps, no matter what tool or framework you use.\n\nI love learning patterns because they apply to any language and system. Patterns can be combined to solve your app‚Äôs exact requirements, often leading to more performant and maintainable code.\n\nHopefully, you‚Äôll learn new patterns to add to your toolbox, no matter what frameworks and libraries you use!",
      "id": 10
    }
  ]
}